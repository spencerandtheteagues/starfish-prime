"use client"; import { useState } from 'react';
const API=process.env.NEXT_PUBLIC_BUILDER_URL||'http://localhost:4001'; type Evt={ts:number;runId:string;kind:string;step?:string;message?:string;data?:any}; const steps=['planner','architect','scaffolder','coder','tester','packer','deployer','integrator'];
export default function Page(){ const [prompt,setPrompt]=useState('Build a CRM for contractors (Customers, Jobs, Bids, Invoices)'); const [runId,setRunId]=useState<string|null>(null); const [events,setEvents]=useState<Evt[]>([]); const [plan,setPlan]=useState<any>(null); const [msg,setMsg]=useState('');
async function start(scaffold=true){ setEvents([]); setPlan(null); const res=await fetch(`${API}/runs`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({prompt,scaffold,useSpecKit:true})}); const {runId}=await res.json(); setRunId(runId); const ws=new WebSocket(`${API.replace(/^http/,'ws')}/ws?runId=${runId}`); ws.onmessage=(m)=>{ const evt=JSON.parse(m.data) as Evt; setEvents(prev=>[...prev,evt].slice(-500)); if(evt.kind==='artifact' && evt.step==='planner' && evt.data?.plan) setPlan(evt.data.plan); }; }
async function sendMsg(){ if(!runId||!msg) return; await fetch(`${API}/runs/${runId}/message`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message:msg})}); setMsg(''); }
async function cancel(){ if(!runId) return; await fetch(`${API}/runs/${runId}/cancel`,{method:'POST'}); }
async function push(){ if(!runId) return; const r=await fetch(`${API}/runs/${runId}/push`,{method:'POST'}); const j=await r.json(); setEvents(prev=>[...prev,{ ts:Date.now(), runId, kind:'artifact', step:'integrator', message:`PR: ${j.url}`, data:j }]); }
const statusFor=(s:string)=>{ const last=events.filter(e=>e.step===s).slice(-1)[0]; if(!last) return <span className='badge badge-idle'>idle</span>; const msg=last.message||''; if(/complete|Repo scaffolded|Opened PR|Spec Kit completed|All tests passed/i.test(msg)) return <span className='badge badge-done'>done</span>; if(/Running|Scaffolding|Planning|coder|tester|integrator/i.test(msg)) return <span className='badge badge-run'>running</span>; return <span className='badge badge-idle'>idle</span>; };
return(<div style={{display:'grid',gridTemplateColumns:'1fr 1fr',gap:24}}><div className='card' style={{padding:16}}><h2 style={{color:'var(--neon2)'}}>Mission Control</h2><div style={{display:'flex',gap:8,marginTop:8}}><input value={prompt} onChange={e=>setPrompt(e.target.value)} style={{flex:1}}/><button onClick={()=>start(true)}>Scaffold + CRUD</button><button onClick={cancel}>Cancel</button></div><div style={{display:'flex',gap:8,marginTop:8}}><input placeholder='Message to agents...' value={msg} onChange={e=>setMsg(e.target.value)} style={{flex:1}}/><button onClick={sendMsg}>Send</button><button onClick={push}>Push to GitHub</button></div><div style={{display:'grid',gridTemplateColumns:'repeat(8,1fr)',gap:8,marginTop:16}}>{steps.map(s=>(<div key={s} className='card' style={{padding:8,textAlign:'center'}}><div style={{fontSize:12,color:'#bbb'}}>{s}</div><div>{statusFor(s)}</div></div>))}</div>{runId&&(<div style={{marginTop:16,display:'flex',gap:8}}><a href={`${API}/runs/${runId}/artifacts.zip`} target='_blank'><button>Download Artifacts</button></a><a href={`${API}/runs/${runId}/app.zip`} target='_blank'><button>Download App ZIP</button></a></div>)}</div><div className='card' style={{padding:16}}><h2 style={{color:'var(--neon)'}}>Live Log</h2><div style={{height:420,overflow:'auto',marginTop:8,padding:8,border:'1px solid rgba(255,255,255,0.08)',borderRadius:12}}>{events.map((e,i)=>(<div key={i} style={{fontSize:12,marginBottom:6}}><span style={{color:'#888'}}>{new Date(e.ts).toLocaleTimeString()}</span> <span style={{color:'#aaa'}}>[{e.step||'-'}]</span> <span>{e.message}</span></div>))}</div>{plan&&(<div style={{marginTop:16}}><h3>Plan</h3><pre>{JSON.stringify(plan,null,2)}</pre></div>)}</div></div>); }
