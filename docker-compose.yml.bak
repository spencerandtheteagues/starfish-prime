version: "3.9"

services:
  traefik:
    image: traefik:v3.0
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      # TLS (enable when using a real domain)
      # - --entrypoints.websecure.address=:443
      # - --certificatesresolvers.myresolver.acme.httpchallenge=true
      # - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      # - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}
      # - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/letsencrypt
    networks: [net]
    labels:
      - "traefik.enable=true"

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports: ["${POSTGRES_PORT}:5432"]
    networks: [net]

  redis:
    image: redis:7-alpine
    ports: ["${REDIS_PORT}:6379"]
    networks: [net]

  api:
    build: ./services/api
    environment:
      PORT: ${API_PORT}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      DEMO_MODE: ${DEMO_MODE}
    depends_on: [postgres]
    networks: [net]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${BASE_DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=${API_PORT}"

  preview-manager:
    build: ./services/preview-manager
    environment:
      PORT: ${PREVIEW_MANAGER_PORT}
      API_BASE: http://api.${BASE_DOMAIN}
      BASE_DOMAIN: ${BASE_DOMAIN}
      DOCKER_NETWORK: ${DOCKER_NETWORK}
      PREVIEW_IMAGE: ${PREVIEW_IMAGE}
      PREVIEW_PORT: ${PREVIEW_PORT}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - previews:/previews
    depends_on: [api, traefik]
    networks: [net]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.preview.rule=Host(`preview.${BASE_DOMAIN}`)"
      - "traefik.http.routers.preview.entrypoints=web"
      - "traefik.http.services.preview.loadbalancer.server.port=${PREVIEW_MANAGER_PORT}"

  orchestrator:
    build: ./services/orchestrator
    environment:
      PORT: ${ORCHESTRATOR_PORT}
    depends_on: [api, preview-manager]
    networks: [net]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.orchestrator.rule=Host(`orchestrator.${BASE_DOMAIN}`)"
      - "traefik.http.routers.orchestrator.entrypoints=web"
      - "traefik.http.services.orchestrator.loadbalancer.server.port=${ORCHESTRATOR_PORT}"

  collab:
    build: ./services/collab
    environment:
      PORT: ${COLLAB_PORT}
    networks: [net]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.collab.rule=Host(`collab.${BASE_DOMAIN}`)"
      - "traefik.http.routers.collab.entrypoints=web"
      - "traefik.http.services.collab.loadbalancer.server.port=${COLLAB_PORT}"

  ide:
    build: ./services/ide
    environment:
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXT_PUBLIC_API_BASE: http://api.${BASE_DOMAIN}
      NEXT_PUBLIC_ORCHESTRATOR_BASE: http://orchestrator.${BASE_DOMAIN}
      NEXT_PUBLIC_PREVIEW_BASE: http://preview.${BASE_DOMAIN}
      NEXT_PUBLIC_BASE_DOMAIN: ${BASE_DOMAIN}
    depends_on: [api, orchestrator, preview-manager]
    networks: [net]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`ide.${BASE_DOMAIN}`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app.loadbalancer.server.port=${IDE_PORT}"

volumes:
  pgdata:
  previews:
  traefik-data:

networks:
  net:
    driver: bridge
